#!@PYTHON_EXECUTABLE@

import os, sys
sys.path.insert(0, os.path.join('@CMAKE_SOURCE_DIR@', 'PythonModules'))
import yaml
import argparse
from Gdb import Gdb
from Locator import Locator
from Launcher import Launcher
from Environment import Environment

class RunOnExe:
    def __init__(self, exe_name):
        self.exe_name = exe_name

    def __call__(self, cmd):
        l = Launcher(cmd)
        l.addArg(self.exe_name)
        l(wait_for_command_to_complete = True)

class Action(object):
    def __init__(self, exeName):
        self.yml = yaml.load(file('@CMAKE_VARIABLES_YML_OUT_FILE@', 'r'))
        mp3db_yml = yaml.load(file(os.path.join('@CMAKE_BINARY_DIR@', 'mp3db.yml'), 'r'))
        build_type = self.yml['cmake']['build_type'].lower()
        self.yml['lib'][build_type] = dict(mp3db_yml['lib'][build_type].items() +
                                           self.yml['lib'][build_type].items())
        exe_dir = self.yml[build_type]['inst_prefix']

        ld_lib_path = Environment('LD_LIBRARY_PATH')
        ld_lib_path.prepend(os.path.dirname(self.yml['lib'][build_type]['yaml']))
        ld_lib_path.prepend(self.yml['dir']['boost_lib'])
        
        poco_include_dir = self.yml['dir']['poco_include']
        poco_lib_dir = os.path.join(os.path.dirname(poco_include_dir), 'lib')
        ld_lib_path.prepend(poco_lib_dir)

        self.exe_file = os.path.join(exe_dir, self.yml['misc']['git_branch'], 'bin', exeName)

    def __call__(self, **kwargs):
        if kwargs.get('deps'):
            r = RunOnExe(self.exe_file)
            r('ldd')
        else:
            cmake = self.yml['cmake']
            init_file = os.path.join('@CMAKE_BINARY_DIR@', 'init.gdb')
            conf_file = os.path.join('@CMAKE_SOURCE_DIR@', 'Share', 'Data', 'Config.yml')
            style_sheet = os.path.join('@CMAKE_SOURCE_DIR@', 'Share', 'Data', 'Preferences.css')
            
            l = Gdb(exe_file = self.exe_file,
                    debug = kwargs.get('debug'),
                    init_file = init_file,
                    dry_run = kwargs.get('dry_run')
                    )
            
            app_args = {
                'conf-file' : conf_file,
                'style-sheet' : style_sheet,
                }
            l(**app_args)
        
if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog = 'mp3db')
    subparsers = parser.add_subparsers(dest = 'command')

    tag_rename_parser = subparsers.add_parser('tag-rename')

    tag_rename_group = tag_rename_parser.add_mutually_exclusive_group()
    tag_rename_group.add_argument('-d', dest = 'debug', action = 'store_true')
    tag_rename_group.add_argument('-l', dest = 'show_dependencies', action = 'store_true')
    tag_rename_group.add_argument('-y', dest = 'dry_run', action = 'store_true')

    args = parser.parse_args()

    a = Action(args.command)
    a(debug = args.debug, dry_run = args.dry_run, deps = args.show_dependencies)
